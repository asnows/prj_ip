// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GaussianBlur (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_V,
        p_src_cols_V,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write,
        sigma
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_src_rows_V;
input  [31:0] p_src_cols_V;
input  [7:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [31:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;
input  [31:0] sigma;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] sigmaX_assign_fu_150_p1;
reg    ap_block_state1;
wire    ap_CS_fsm_state3;
wire    grp_getGaussianKernel_fu_110_ap_idle;
wire    grp_getGaussianKernel_fu_110_ap_ready;
wire    grp_getGaussianKernel_fu_110_ap_done;
reg   [15:0] kernel_val_0_V_0_reg_214;
reg   [15:0] kernel_val_0_V_1_reg_219;
reg   [15:0] kernel_val_0_V_2_reg_224;
reg   [15:0] kernel_val_1_V_0_reg_229;
reg   [15:0] kernel_val_1_V_1_reg_234;
reg   [15:0] kernel_val_1_V_2_reg_239;
reg   [15:0] kernel_val_2_V_0_reg_244;
reg   [15:0] kernel_val_2_V_1_reg_249;
reg   [15:0] kernel_val_2_V_2_reg_254;
wire    grp_getGaussianKernel_fu_110_ap_start;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_0;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_1;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_2;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_3;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_4;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_5;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_6;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_7;
wire   [15:0] grp_getGaussianKernel_fu_110_ap_return_8;
wire    grp_Filter2D_fu_129_ap_start;
wire    grp_Filter2D_fu_129_ap_done;
wire    grp_Filter2D_fu_129_ap_idle;
wire    grp_Filter2D_fu_129_ap_ready;
wire    grp_Filter2D_fu_129_p_src_data_stream_V_read;
wire   [31:0] grp_Filter2D_fu_129_p_dst_data_stream_V_din;
wire    grp_Filter2D_fu_129_p_dst_data_stream_V_write;
reg    grp_getGaussianKernel_fu_110_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_Filter2D_fu_129_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_getGaussianKernel_fu_110_ap_start_reg = 1'b0;
#0 grp_Filter2D_fu_129_ap_start_reg = 1'b0;
end

getGaussianKernel grp_getGaussianKernel_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_getGaussianKernel_fu_110_ap_start),
    .ap_done(grp_getGaussianKernel_fu_110_ap_done),
    .ap_idle(grp_getGaussianKernel_fu_110_ap_idle),
    .ap_ready(grp_getGaussianKernel_fu_110_ap_ready),
    .sigmaX(sigmaX_assign_fu_150_p1),
    .ap_return_0(grp_getGaussianKernel_fu_110_ap_return_0),
    .ap_return_1(grp_getGaussianKernel_fu_110_ap_return_1),
    .ap_return_2(grp_getGaussianKernel_fu_110_ap_return_2),
    .ap_return_3(grp_getGaussianKernel_fu_110_ap_return_3),
    .ap_return_4(grp_getGaussianKernel_fu_110_ap_return_4),
    .ap_return_5(grp_getGaussianKernel_fu_110_ap_return_5),
    .ap_return_6(grp_getGaussianKernel_fu_110_ap_return_6),
    .ap_return_7(grp_getGaussianKernel_fu_110_ap_return_7),
    .ap_return_8(grp_getGaussianKernel_fu_110_ap_return_8)
);

Filter2D grp_Filter2D_fu_129(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Filter2D_fu_129_ap_start),
    .ap_done(grp_Filter2D_fu_129_ap_done),
    .ap_idle(grp_Filter2D_fu_129_ap_idle),
    .ap_ready(grp_Filter2D_fu_129_ap_ready),
    .p_src_rows_V_read(p_src_rows_V),
    .p_src_cols_V_read(p_src_cols_V),
    .p_src_data_stream_V_dout(p_src_data_stream_V_dout),
    .p_src_data_stream_V_empty_n(p_src_data_stream_V_empty_n),
    .p_src_data_stream_V_read(grp_Filter2D_fu_129_p_src_data_stream_V_read),
    .p_dst_data_stream_V_din(grp_Filter2D_fu_129_p_dst_data_stream_V_din),
    .p_dst_data_stream_V_full_n(p_dst_data_stream_V_full_n),
    .p_dst_data_stream_V_write(grp_Filter2D_fu_129_p_dst_data_stream_V_write),
    .p_kernel_val_0_V_0_read(kernel_val_0_V_0_reg_214),
    .p_kernel_val_0_V_1_read(kernel_val_0_V_1_reg_219),
    .p_kernel_val_0_V_2_read(kernel_val_0_V_2_reg_224),
    .p_kernel_val_1_V_0_read(kernel_val_1_V_0_reg_229),
    .p_kernel_val_1_V_1_read(kernel_val_1_V_1_reg_234),
    .p_kernel_val_1_V_2_read(kernel_val_1_V_2_reg_239),
    .p_kernel_val_2_V_0_read(kernel_val_2_V_0_reg_244),
    .p_kernel_val_2_V_1_read(kernel_val_2_V_1_reg_249),
    .p_kernel_val_2_V_2_read(kernel_val_2_V_2_reg_254)
);

fpag_gaus_fpext_3sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpag_gaus_fpext_3sc4_U88(
    .din0(sigma),
    .dout(sigmaX_assign_fu_150_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_Filter2D_fu_129_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Filter2D_fu_129_ap_start_reg <= 1'b0;
    end else begin
        if (((grp_getGaussianKernel_fu_110_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_Filter2D_fu_129_ap_start_reg <= 1'b1;
        end else if ((grp_Filter2D_fu_129_ap_ready == 1'b1)) begin
            grp_Filter2D_fu_129_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_getGaussianKernel_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_getGaussianKernel_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_getGaussianKernel_fu_110_ap_ready == 1'b1)) begin
            grp_getGaussianKernel_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_getGaussianKernel_fu_110_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_val_0_V_0_reg_214 <= grp_getGaussianKernel_fu_110_ap_return_0;
        kernel_val_0_V_1_reg_219 <= grp_getGaussianKernel_fu_110_ap_return_1;
        kernel_val_0_V_2_reg_224 <= grp_getGaussianKernel_fu_110_ap_return_2;
        kernel_val_1_V_0_reg_229 <= grp_getGaussianKernel_fu_110_ap_return_3;
        kernel_val_1_V_1_reg_234 <= grp_getGaussianKernel_fu_110_ap_return_4;
        kernel_val_1_V_2_reg_239 <= grp_getGaussianKernel_fu_110_ap_return_5;
        kernel_val_2_V_0_reg_244 <= grp_getGaussianKernel_fu_110_ap_return_6;
        kernel_val_2_V_1_reg_249 <= grp_getGaussianKernel_fu_110_ap_return_7;
        kernel_val_2_V_2_reg_254 <= grp_getGaussianKernel_fu_110_ap_return_8;
    end
end

always @ (*) begin
    if (((grp_Filter2D_fu_129_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Filter2D_fu_129_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_dst_data_stream_V_write = grp_Filter2D_fu_129_p_dst_data_stream_V_write;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_src_data_stream_V_read = grp_Filter2D_fu_129_p_src_data_stream_V_read;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_getGaussianKernel_fu_110_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_Filter2D_fu_129_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_Filter2D_fu_129_ap_start = grp_Filter2D_fu_129_ap_start_reg;

assign grp_getGaussianKernel_fu_110_ap_start = grp_getGaussianKernel_fu_110_ap_start_reg;

assign p_dst_data_stream_V_din = grp_Filter2D_fu_129_p_dst_data_stream_V_din;

endmodule //GaussianBlur
