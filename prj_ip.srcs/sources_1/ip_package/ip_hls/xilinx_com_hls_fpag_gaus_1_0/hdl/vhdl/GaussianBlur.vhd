-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GaussianBlur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC;
    sigma : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GaussianBlur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sigmaX_assign_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_getGaussianKernel_fu_110_ap_idle : STD_LOGIC;
    signal grp_getGaussianKernel_fu_110_ap_ready : STD_LOGIC;
    signal grp_getGaussianKernel_fu_110_ap_done : STD_LOGIC;
    signal kernel_val_0_V_0_reg_214 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_0_V_1_reg_219 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_0_V_2_reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_1_V_0_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_1_V_1_reg_234 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_1_V_2_reg_239 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_2_V_0_reg_244 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_2_V_1_reg_249 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_2_V_2_reg_254 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_start : STD_LOGIC;
    signal grp_getGaussianKernel_fu_110_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_getGaussianKernel_fu_110_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Filter2D_fu_129_ap_start : STD_LOGIC;
    signal grp_Filter2D_fu_129_ap_done : STD_LOGIC;
    signal grp_Filter2D_fu_129_ap_idle : STD_LOGIC;
    signal grp_Filter2D_fu_129_ap_ready : STD_LOGIC;
    signal grp_Filter2D_fu_129_p_src_data_stream_V_read : STD_LOGIC;
    signal grp_Filter2D_fu_129_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Filter2D_fu_129_p_dst_data_stream_V_write : STD_LOGIC;
    signal grp_getGaussianKernel_fu_110_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Filter2D_fu_129_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component getGaussianKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sigmaX : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC;
        p_kernel_val_0_V_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_0_V_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_0_V_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_1_V_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_1_V_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_1_V_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_2_V_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_2_V_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_kernel_val_2_V_2_read : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fpag_gaus_fpext_3sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_getGaussianKernel_fu_110 : component getGaussianKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getGaussianKernel_fu_110_ap_start,
        ap_done => grp_getGaussianKernel_fu_110_ap_done,
        ap_idle => grp_getGaussianKernel_fu_110_ap_idle,
        ap_ready => grp_getGaussianKernel_fu_110_ap_ready,
        sigmaX => sigmaX_assign_fu_150_p1,
        ap_return_0 => grp_getGaussianKernel_fu_110_ap_return_0,
        ap_return_1 => grp_getGaussianKernel_fu_110_ap_return_1,
        ap_return_2 => grp_getGaussianKernel_fu_110_ap_return_2,
        ap_return_3 => grp_getGaussianKernel_fu_110_ap_return_3,
        ap_return_4 => grp_getGaussianKernel_fu_110_ap_return_4,
        ap_return_5 => grp_getGaussianKernel_fu_110_ap_return_5,
        ap_return_6 => grp_getGaussianKernel_fu_110_ap_return_6,
        ap_return_7 => grp_getGaussianKernel_fu_110_ap_return_7,
        ap_return_8 => grp_getGaussianKernel_fu_110_ap_return_8);

    grp_Filter2D_fu_129 : component Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Filter2D_fu_129_ap_start,
        ap_done => grp_Filter2D_fu_129_ap_done,
        ap_idle => grp_Filter2D_fu_129_ap_idle,
        ap_ready => grp_Filter2D_fu_129_ap_ready,
        p_src_rows_V_read => p_src_rows_V,
        p_src_cols_V_read => p_src_cols_V,
        p_src_data_stream_V_dout => p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => grp_Filter2D_fu_129_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => grp_Filter2D_fu_129_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => grp_Filter2D_fu_129_p_dst_data_stream_V_write,
        p_kernel_val_0_V_0_read => kernel_val_0_V_0_reg_214,
        p_kernel_val_0_V_1_read => kernel_val_0_V_1_reg_219,
        p_kernel_val_0_V_2_read => kernel_val_0_V_2_reg_224,
        p_kernel_val_1_V_0_read => kernel_val_1_V_0_reg_229,
        p_kernel_val_1_V_1_read => kernel_val_1_V_1_reg_234,
        p_kernel_val_1_V_2_read => kernel_val_1_V_2_reg_239,
        p_kernel_val_2_V_0_read => kernel_val_2_V_0_reg_244,
        p_kernel_val_2_V_1_read => kernel_val_2_V_1_reg_249,
        p_kernel_val_2_V_2_read => kernel_val_2_V_2_reg_254);

    fpag_gaus_fpext_3sc4_U88 : component fpag_gaus_fpext_3sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => sigma,
        dout => sigmaX_assign_fu_150_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_Filter2D_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Filter2D_fu_129_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Filter2D_fu_129_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_getGaussianKernel_fu_110_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_Filter2D_fu_129_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Filter2D_fu_129_ap_ready = ap_const_logic_1)) then 
                    grp_Filter2D_fu_129_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getGaussianKernel_fu_110_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getGaussianKernel_fu_110_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_getGaussianKernel_fu_110_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getGaussianKernel_fu_110_ap_ready = ap_const_logic_1)) then 
                    grp_getGaussianKernel_fu_110_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_getGaussianKernel_fu_110_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_val_0_V_0_reg_214 <= grp_getGaussianKernel_fu_110_ap_return_0;
                kernel_val_0_V_1_reg_219 <= grp_getGaussianKernel_fu_110_ap_return_1;
                kernel_val_0_V_2_reg_224 <= grp_getGaussianKernel_fu_110_ap_return_2;
                kernel_val_1_V_0_reg_229 <= grp_getGaussianKernel_fu_110_ap_return_3;
                kernel_val_1_V_1_reg_234 <= grp_getGaussianKernel_fu_110_ap_return_4;
                kernel_val_1_V_2_reg_239 <= grp_getGaussianKernel_fu_110_ap_return_5;
                kernel_val_2_V_0_reg_244 <= grp_getGaussianKernel_fu_110_ap_return_6;
                kernel_val_2_V_1_reg_249 <= grp_getGaussianKernel_fu_110_ap_return_7;
                kernel_val_2_V_2_reg_254 <= grp_getGaussianKernel_fu_110_ap_return_8;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_getGaussianKernel_fu_110_ap_done, grp_Filter2D_fu_129_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_getGaussianKernel_fu_110_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_Filter2D_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_Filter2D_fu_129_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_Filter2D_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Filter2D_fu_129_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_Filter2D_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Filter2D_fu_129_ap_start <= grp_Filter2D_fu_129_ap_start_reg;
    grp_getGaussianKernel_fu_110_ap_start <= grp_getGaussianKernel_fu_110_ap_start_reg;
    p_dst_data_stream_V_din <= grp_Filter2D_fu_129_p_dst_data_stream_V_din;

    p_dst_data_stream_V_write_assign_proc : process(grp_Filter2D_fu_129_p_dst_data_stream_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_dst_data_stream_V_write <= grp_Filter2D_fu_129_p_dst_data_stream_V_write;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(grp_Filter2D_fu_129_p_src_data_stream_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_src_data_stream_V_read <= grp_Filter2D_fu_129_p_src_data_stream_V_read;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
