-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getGaussianKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sigmaX : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of getGaussianKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (119 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (119 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (119 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (119 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (119 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (119 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (119 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (119 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (119 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (119 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (119 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (119 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv12_FF2 : STD_LOGIC_VECTOR (11 downto 0) := "111111110010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_FF1 : STD_LOGIC_VECTOR (11 downto 0) := "111111110001";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal sigmaX_assign_fu_393_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_412_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_1397 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal x_assign1_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_80_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_reg_1466 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_457_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_1474 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal x_assign_s_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_87_reg_1484 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pow_generic_float_s_fu_213_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_1489 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_pow_generic_float_s_fu_232_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_reg_1494 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_reg_1499 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_62_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_reg_1504 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_reg_1509 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_reg_1514 : STD_LOGIC_VECTOR (63 downto 0);
    signal index1_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index1_reg_1519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal index2_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index2_reg_1524 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i2_reg_1534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal i_2_fu_512_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_1543 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal tmp_86_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_86_reg_1548 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp24_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp24_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp31_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp31_reg_1566 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_630_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_1575 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal kval_addr_1_reg_1580 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_reg_1585 : STD_LOGIC_VECTOR (0 downto 0);
    signal kval_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal isneg_reg_1606 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal exp_tmp_V_reg_1613 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_91_fu_688_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_91_reg_1618 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_70_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_708_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_reg_1629 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal man_V_1_fu_712_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_reg_1634 : STD_LOGIC_VECTOR (53 downto 0);
    signal F2_fu_718_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_1639 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_reg_1645 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_742_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1651 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1658 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1663 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_reg_1668 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal tmp_92_fu_785_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_reg_1673 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_66_fu_850_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_66_reg_1679 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp6_demorgan_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_reg_1684 : STD_LOGIC_VECTOR (0 downto 0);
    signal kval_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kval_ce0 : STD_LOGIC;
    signal kval_we0 : STD_LOGIC;
    signal kval_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_float_s_fu_213_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_213_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_213_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_213_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_232_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_232_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_232_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_232_ap_ready : STD_LOGIC;
    signal i_reg_166 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_178 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal i1_reg_189 : STD_LOGIC_VECTOR (1 downto 0);
    signal j2_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal grp_pow_generic_float_s_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_NS_fsm_state25 : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_pow_generic_float_s_fu_232_ap_start_reg : STD_LOGIC := '0';
    signal tmp_92_cast_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_cast_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_2_V_2_w_fu_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V28_2_fu_1328_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_2_V_1_w_fu_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V27_2_fu_1265_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_0_V_0_w_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V_2_fu_1234_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_2_V_0_w_fu_118 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V26_2_fu_1211_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_1_V_2_w_fu_122 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V1520_2_fu_1203_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_0_V_1_w_fu_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V16_2_fu_1156_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_1_V_1_w_fu_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V14_2_fu_1101_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_1_V_0_w_fu_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V13_2_fu_1062_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_0_V_2_w_fu_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_val_V2_2_fu_1046_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_251_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_282_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal sigmaX_to_int_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_355_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_77_fu_365_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_418_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_75_fu_433_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_441_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_57_cast_fu_429_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_463_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_65_cast_fu_474_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_220_to_int_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_220_neg_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_522_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_530_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_58_cast_fu_518_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp29_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp30_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_cast_fu_636_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_88_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_90_fu_650_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ireg_V_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_666_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_68_fu_701_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_67_fu_698_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_72_fu_730_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_fu_736_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_93_fu_750_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_64_fu_772_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_cast_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_794_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_79_fu_798_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_76_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_804_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge_fu_808_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_fu_823_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_176_cast_fu_828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_840_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_846_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_65_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sh_amt_cast3_fu_861_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp1_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_879_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp13_demorgan_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_864_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp8_fu_896_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp18_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp94_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_val_V2_fu_918_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp21_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_949_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp25_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp23_fu_968_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp27_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp26_fu_981_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp32_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp28_fu_994_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp33_fu_1007_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp35_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp36_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp34_fu_1015_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp38_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp37_fu_1033_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp39_fu_1054_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp40_fu_1070_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp41_fu_1078_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp42_fu_1086_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp43_fu_1093_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp44_fu_1109_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp45_fu_1117_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp46_fu_1125_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp47_fu_1133_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp48_fu_1141_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp49_fu_1148_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp50_fu_1164_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp51_fu_1172_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp52_fu_1180_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp53_fu_1188_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp54_fu_1195_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp55_fu_1219_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp56_fu_1226_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp57_fu_1242_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp58_fu_1250_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp59_fu_1257_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp60_fu_1273_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp61_fu_1281_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp62_fu_1289_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp63_fu_1297_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp64_fu_1305_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp65_fu_1313_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp66_fu_1320_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_251_opcode : STD_LOGIC_VECTOR (1 downto 0);

    component pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpag_gaus_faddfsuocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpag_gaus_fdiv_32pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpag_gaus_sitofp_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpag_gaus_fptruncrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpag_gaus_fpext_3sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpag_gaus_fexp_32tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpag_gaus_dmul_64udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpag_gaus_ddiv_64vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpag_gaus_dcmp_64wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component getGaussianKernelncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    kval_U : component getGaussianKernelncg
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kval_address0,
        ce0 => kval_ce0,
        we0 => kval_we0,
        d0 => kval_d0,
        q0 => kval_q0);

    grp_pow_generic_float_s_fu_213 : component pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_213_ap_start,
        ap_done => grp_pow_generic_float_s_fu_213_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_213_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_213_ap_ready,
        base_r => x_assign_reg_1461,
        ap_return => grp_pow_generic_float_s_fu_213_ap_return);

    grp_pow_generic_float_s_fu_232 : component pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_232_ap_start,
        ap_done => grp_pow_generic_float_s_fu_232_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_232_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_232_ap_ready,
        base_r => grp_fu_261_p1,
        ap_return => grp_pow_generic_float_s_fu_232_ap_return);

    fpag_gaus_faddfsuocq_U29 : component fpag_gaus_faddfsuocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_251_p0,
        din1 => grp_fu_251_p1,
        opcode => grp_fu_251_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    fpag_gaus_fdiv_32pcA_U30 : component fpag_gaus_fdiv_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kval_q0,
        din1 => sum_fu_98,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    fpag_gaus_sitofp_qcK_U31 : component fpag_gaus_sitofp_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p1);

    fpag_gaus_fptruncrcU_U32 : component fpag_gaus_fptruncrcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_60_reg_1509,
        dout => index1_fu_265_p1);

    fpag_gaus_fptruncrcU_U33 : component fpag_gaus_fptruncrcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_63_reg_1514,
        dout => index2_fu_268_p1);

    fpag_gaus_fpext_3sc4_U34 : component fpag_gaus_fpext_3sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_271_p0,
        dout => grp_fu_271_p1);

    fpag_gaus_fpext_3sc4_U35 : component fpag_gaus_fpext_3sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_i_i1_reg_1494,
        dout => tmp_62_fu_274_p1);

    fpag_gaus_fexp_32tde_U36 : component fpag_gaus_fexp_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_340,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p2);

    fpag_gaus_dmul_64udo_U37 : component fpag_gaus_dmul_64udo
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_282_p0,
        din1 => grp_fu_282_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_282_p2);

    fpag_gaus_ddiv_64vdy_U38 : component fpag_gaus_ddiv_64vdy
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_59_reg_1499,
        din1 => reg_333,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);

    fpag_gaus_ddiv_64vdy_U39 : component fpag_gaus_ddiv_64vdy
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_62_reg_1504,
        din1 => reg_333,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p2);

    fpag_gaus_dcmp_64wdI_U40 : component fpag_gaus_dcmp_64wdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => sigmaX,
        din1 => ap_const_lv64_0,
        opcode => ap_const_lv5_5,
        dout => tmp_66_fu_295_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state25) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    grp_pow_generic_float_s_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_232_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_232_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state25) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    grp_pow_generic_float_s_fu_232_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_232_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_232_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then 
                i1_reg_189 <= i_2_reg_1543;
            elsif (((exitcond1_fu_406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i1_reg_189 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_451_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_reg_166 <= i_1_reg_1397;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_reg_166 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j2_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                j2_reg_201 <= j_2_reg_1575;
            elsif (((exitcond2_fu_506_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                j2_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_reg_178 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                j_reg_178 <= j_1_reg_1474;
            end if; 
        end if;
    end process;

    sum_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                sum_fu_98 <= reg_340;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_fu_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                F2_reg_1639 <= F2_fu_718_p2;
                icmp_reg_1658 <= icmp_fu_760_p2;
                    p_Result_s_reg_1629(51 downto 0) <= p_Result_s_fu_708_p1(51 downto 0);
                sh_amt_reg_1651 <= sh_amt_fu_742_p3;
                tmp_71_reg_1645 <= tmp_71_fu_724_p2;
                tmp_82_reg_1663 <= tmp_82_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                exp_tmp_V_reg_1613 <= ireg_V_fu_662_p1(62 downto 52);
                isneg_reg_1606 <= ireg_V_fu_662_p1(63 downto 63);
                tmp_70_reg_1623 <= tmp_70_fu_692_p2;
                tmp_91_reg_1618 <= tmp_91_fu_688_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_1_reg_1397 <= i_1_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                i_2_reg_1543 <= i_2_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                index1_reg_1519 <= index1_fu_265_p1;
                index2_reg_1524 <= index2_fu_268_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_1_reg_1474 <= j_1_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                j_2_reg_1575 <= j_2_fu_630_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state120)) then
                kernel_val_0_V_0_w_fu_114 <= kernel_val_V_2_fu_1234_p3;
                kernel_val_0_V_1_w_fu_126 <= kernel_val_V16_2_fu_1156_p3;
                kernel_val_0_V_2_w_fu_138 <= kernel_val_V2_2_fu_1046_p3;
                kernel_val_1_V_0_w_fu_134 <= kernel_val_V13_2_fu_1062_p3;
                kernel_val_1_V_1_w_fu_130 <= kernel_val_V14_2_fu_1101_p3;
                kernel_val_1_V_2_w_fu_122 <= kernel_val_V1520_2_fu_1203_p3;
                kernel_val_2_V_0_w_fu_118 <= kernel_val_V26_2_fu_1211_p3;
                kernel_val_2_V_1_w_fu_110 <= kernel_val_V27_2_fu_1265_p3;
                kernel_val_2_V_2_w_fu_106 <= kernel_val_V28_2_fu_1328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                kval_addr_1_reg_1580 <= tmp_93_cast_fu_645_p1(4 - 1 downto 0);
                tmp_94_reg_1585 <= tmp_94_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((isneg_reg_1606 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                man_V_1_reg_1634 <= man_V_1_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then
                p_Val2_66_reg_1679 <= p_Val2_66_fu_850_p2;
                sel_tmp6_demorgan_reg_1684 <= sel_tmp6_demorgan_fu_856_p2;
                tmp_74_reg_1668 <= tmp_74_fu_780_p2;
                tmp_92_reg_1673 <= tmp_92_fu_785_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_333 <= grp_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state83))) then
                reg_340 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_506_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                sel_tmp16_reg_1553 <= sel_tmp16_fu_540_p2;
                sel_tmp24_reg_1559 <= sel_tmp24_fu_546_p2;
                sel_tmp31_reg_1566 <= sel_tmp31_fu_564_p2;
                tmp_86_reg_1548 <= tmp_86_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                tmp_59_reg_1499 <= grp_fu_271_p1;
                tmp_62_reg_1504 <= tmp_62_fu_274_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                tmp_60_reg_1509 <= grp_fu_287_p2;
                tmp_63_reg_1514 <= grp_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_80_reg_1466 <= tmp_80_fu_445_p2;
                x_assign_reg_1461 <= grp_fu_261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                tmp_87_reg_1484 <= tmp_87_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                tmp_i_i1_reg_1494 <= grp_pow_generic_float_s_fu_232_ap_return;
                tmp_i_i_reg_1489 <= grp_pow_generic_float_s_fu_213_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                tmp_i_i2_reg_1534 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                v_assign_reg_1601 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    p_Result_s_reg_1629(53 downto 52) <= "01";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, exitcond1_fu_406_p2, ap_CS_fsm_state20, exitcond3_fu_451_p2, ap_CS_fsm_state99, exitcond2_fu_506_p2, ap_CS_fsm_state100, exitcond_fu_624_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((exitcond1_fu_406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((exitcond3_fu_451_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state99 => 
                if (((exitcond2_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state100 => 
                if (((exitcond_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_67_fu_698_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_NS_fsm_state25 <= ap_NS_fsm(24);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state99, exitcond2_fu_506_p2)
    begin
        if ((((exitcond2_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state99, exitcond2_fu_506_p2)
    begin
        if (((exitcond2_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= kernel_val_0_V_0_w_fu_114;
    ap_return_1 <= kernel_val_0_V_1_w_fu_126;
    ap_return_2 <= kernel_val_0_V_2_w_fu_138;
    ap_return_3 <= kernel_val_1_V_0_w_fu_134;
    ap_return_4 <= kernel_val_1_V_1_w_fu_130;
    ap_return_5 <= kernel_val_1_V_2_w_fu_122;
    ap_return_6 <= kernel_val_2_V_0_w_fu_118;
    ap_return_7 <= kernel_val_2_V_1_w_fu_110;
    ap_return_8 <= kernel_val_2_V_2_w_fu_106;
    exitcond1_fu_406_p2 <= "1" when (i_reg_166 = ap_const_lv2_3) else "0";
    exitcond2_fu_506_p2 <= "1" when (i1_reg_189 = ap_const_lv2_3) else "0";
    exitcond3_fu_451_p2 <= "1" when (j_reg_178 = ap_const_lv2_3) else "0";
    exitcond_fu_624_p2 <= "1" when (j2_reg_201 = ap_const_lv2_3) else "0";

    grp_fu_251_opcode_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_251_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_251_opcode <= ap_const_lv2_0;
        else 
            grp_fu_251_opcode <= "XX";
        end if; 
    end process;


    grp_fu_251_p0_assign_proc : process(ap_CS_fsm_state93, tmp_64_fu_492_p1, ap_CS_fsm_state79, sum_fu_98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_251_p0 <= sum_fu_98;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_251_p0 <= tmp_64_fu_492_p1;
        else 
            grp_fu_251_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_251_p1_assign_proc : process(ap_CS_fsm_state93, index2_reg_1524, ap_CS_fsm_state79, tmp_i_i2_reg_1534)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_251_p1 <= tmp_i_i2_reg_1534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_251_p1 <= index2_reg_1524;
        else 
            grp_fu_251_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_261_p0_assign_proc : process(ap_CS_fsm_state14, x_assign1_fu_424_p1, ap_CS_fsm_state20, x_assign_s_fu_469_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_261_p0 <= x_assign_s_fu_469_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_261_p0 <= x_assign1_fu_424_p1;
        else 
            grp_fu_261_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_271_p0_assign_proc : process(tmp_i_i_reg_1489, ap_CS_fsm_state46, v_assign_reg_1601, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_271_p0 <= v_assign_reg_1601;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_271_p0 <= tmp_i_i_reg_1489;
        else 
            grp_fu_271_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_282_p0_assign_proc : process(reg_333, sigmaX_assign_fu_393_p3, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_282_p0 <= reg_333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_282_p0 <= sigmaX_assign_fu_393_p3;
        else 
            grp_fu_282_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_282_p1_assign_proc : process(sigmaX_assign_fu_393_p3, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_282_p1 <= sigmaX_assign_fu_393_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_282_p1 <= ap_const_lv64_4000000000000000;
        else 
            grp_fu_282_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pow_generic_float_s_fu_213_ap_start <= grp_pow_generic_float_s_fu_213_ap_start_reg;
    grp_pow_generic_float_s_fu_232_ap_start <= grp_pow_generic_float_s_fu_232_ap_start_reg;
    i_1_fu_412_p2 <= std_logic_vector(unsigned(i_reg_166) + unsigned(ap_const_lv2_1));
    i_2_fu_512_p2 <= std_logic_vector(unsigned(i1_reg_189) + unsigned(ap_const_lv2_1));
    icmp_fu_760_p2 <= "1" when (tmp_93_fu_750_p4 = ap_const_lv8_0) else "0";
    ireg_V_fu_662_p1 <= grp_fu_271_p1;
    j_1_fu_457_p2 <= std_logic_vector(unsigned(j_reg_178) + unsigned(ap_const_lv2_1));
    j_2_fu_630_p2 <= std_logic_vector(unsigned(j2_reg_201) + unsigned(ap_const_lv2_1));
    kernel_val_V13_2_fu_1062_p3 <= 
        kernel_val_1_V_0_w_fu_134 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp39_fu_1054_p3;
    kernel_val_V14_2_fu_1101_p3 <= 
        kernel_val_1_V_1_w_fu_130 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp43_fu_1093_p3;
    kernel_val_V1520_2_fu_1203_p3 <= 
        kernel_val_1_V_2_w_fu_122 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp54_fu_1195_p3;
    kernel_val_V16_2_fu_1156_p3 <= 
        kernel_val_0_V_1_w_fu_126 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp49_fu_1148_p3;
    kernel_val_V26_2_fu_1211_p3 <= 
        kernel_val_V2_fu_918_p3 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        kernel_val_2_V_0_w_fu_118;
    kernel_val_V27_2_fu_1265_p3 <= 
        kernel_val_2_V_1_w_fu_110 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp59_fu_1257_p3;
    kernel_val_V28_2_fu_1328_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp66_fu_1320_p3;
    kernel_val_V2_2_fu_1046_p3 <= 
        kernel_val_0_V_2_w_fu_138 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp37_fu_1033_p3;
    kernel_val_V2_fu_918_p3 <= 
        tmp_81_fu_864_p2 when (sel_tmp14_fu_913_p2(0) = '1') else 
        sel_tmp8_fu_896_p3;
    kernel_val_V_2_fu_1234_p3 <= 
        kernel_val_0_V_0_w_fu_114 when (sel_tmp38_fu_1041_p2(0) = '1') else 
        sel_tmp56_fu_1226_p3;

    kval_address0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state100, kval_addr_1_reg_1580, ap_CS_fsm_state116, tmp_92_cast_fu_497_p1, tmp_93_cast_fu_645_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            kval_address0 <= kval_addr_1_reg_1580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            kval_address0 <= tmp_93_cast_fu_645_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            kval_address0 <= tmp_92_cast_fu_497_p1(4 - 1 downto 0);
        else 
            kval_address0 <= "XXXX";
        end if; 
    end process;


    kval_ce0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state100, ap_CS_fsm_state116)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            kval_ce0 <= ap_const_logic_1;
        else 
            kval_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kval_d0_assign_proc : process(ap_CS_fsm_state93, tmp_i_i2_reg_1534, grp_fu_255_p2, ap_CS_fsm_state116)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            kval_d0 <= grp_fu_255_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            kval_d0 <= tmp_i_i2_reg_1534;
        else 
            kval_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    kval_we0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state116)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            kval_we0 <= ap_const_logic_1;
        else 
            kval_we0 <= ap_const_logic_0;
        end if; 
    end process;

    man_V_1_fu_712_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_s_fu_708_p1));
    notlhs_fu_369_p2 <= "0" when (tmp_fu_355_p4 = ap_const_lv11_7FF) else "1";
    notrhs_fu_375_p2 <= "1" when (tmp_77_fu_365_p1 = ap_const_lv52_0) else "0";
    p_Result_s_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_701_p3),54));
    p_Val2_64_fu_772_p3 <= 
        man_V_1_reg_1634 when (isneg_reg_1606(0) = '1') else 
        p_Result_s_reg_1629;
    p_Val2_65_fu_815_p3 <= 
        tmp_96_fu_804_p1 when (tmp_76_fu_789_p2(0) = '1') else 
        storemerge_fu_808_p3;
    p_Val2_66_fu_850_p2 <= std_logic_vector(unsigned(tmp_85_fu_846_p1) + unsigned(p_Val2_65_fu_815_p3));
    p_shl1_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_522_p3),5));
    p_shl_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_433_p3),5));
    qb_fu_840_p3 <= 
        isneg_reg_1606 when (tmp_82_reg_1663(0) = '1') else 
        tmp_97_fu_832_p3;
    sel_tmp13_demorgan_fu_903_p2 <= (tmp_71_reg_1645 or sel_tmp6_demorgan_reg_1684);
    sel_tmp13_fu_907_p2 <= (sel_tmp13_demorgan_fu_903_p2 xor ap_const_lv1_1);
    sel_tmp14_fu_913_p2 <= (sel_tmp13_fu_907_p2 and icmp_reg_1658);
    sel_tmp16_fu_540_p2 <= "1" when (i1_reg_189 = ap_const_lv2_0) else "0";
    sel_tmp18_fu_932_p2 <= "0" when (j2_reg_201 = ap_const_lv2_1) else "1";
    sel_tmp19_fu_944_p2 <= (tmp94_fu_938_p2 and sel_tmp16_reg_1553);
    sel_tmp1_fu_869_p2 <= (tmp_70_reg_1623 xor ap_const_lv1_1);
    sel_tmp20_fu_949_p3 <= 
        kernel_val_V2_fu_918_p3 when (sel_tmp19_fu_944_p2(0) = '1') else 
        kernel_val_0_V_2_w_fu_138;
    sel_tmp21_fu_957_p2 <= "1" when (j2_reg_201 = ap_const_lv2_1) else "0";
    sel_tmp22_fu_963_p2 <= (sel_tmp21_fu_957_p2 and sel_tmp16_reg_1553);
    sel_tmp23_fu_968_p3 <= 
        kernel_val_0_V_2_w_fu_138 when (sel_tmp22_fu_963_p2(0) = '1') else 
        sel_tmp20_fu_949_p3;
    sel_tmp24_fu_546_p2 <= "1" when (i1_reg_189 = ap_const_lv2_1) else "0";
    sel_tmp25_fu_976_p2 <= (tmp94_fu_938_p2 and sel_tmp24_reg_1559);
    sel_tmp26_fu_981_p3 <= 
        kernel_val_0_V_2_w_fu_138 when (sel_tmp25_fu_976_p2(0) = '1') else 
        sel_tmp23_fu_968_p3;
    sel_tmp27_fu_989_p2 <= (sel_tmp24_reg_1559 and sel_tmp21_fu_957_p2);
    sel_tmp28_fu_994_p3 <= 
        kernel_val_0_V_2_w_fu_138 when (sel_tmp27_fu_989_p2(0) = '1') else 
        sel_tmp26_fu_981_p3;
    sel_tmp29_fu_552_p2 <= "0" when (i1_reg_189 = ap_const_lv2_0) else "1";
    sel_tmp2_fu_874_p2 <= (tmp_74_reg_1668 and sel_tmp1_fu_869_p2);
    sel_tmp30_fu_558_p2 <= "0" when (i1_reg_189 = ap_const_lv2_1) else "1";
    sel_tmp31_fu_564_p2 <= (sel_tmp30_fu_558_p2 and sel_tmp29_fu_552_p2);
    sel_tmp32_fu_1002_p2 <= (sel_tmp31_reg_1566 and sel_tmp21_fu_957_p2);
    sel_tmp33_fu_1007_p3 <= 
        kernel_val_0_V_2_w_fu_138 when (sel_tmp32_fu_1002_p2(0) = '1') else 
        sel_tmp28_fu_994_p3;
    sel_tmp34_fu_1015_p3 <= 
        kernel_val_0_V_2_w_fu_138 when (tmp_94_reg_1585(0) = '1') else 
        sel_tmp33_fu_1007_p3;
    sel_tmp35_fu_1022_p2 <= "1" when (j2_reg_201 = ap_const_lv2_0) else "0";
    sel_tmp36_fu_1028_p2 <= (sel_tmp35_fu_1022_p2 and sel_tmp24_reg_1559);
    sel_tmp37_fu_1033_p3 <= 
        kernel_val_0_V_2_w_fu_138 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        sel_tmp34_fu_1015_p3;
    sel_tmp38_fu_1041_p2 <= (sel_tmp35_fu_1022_p2 and sel_tmp31_reg_1566);
    sel_tmp39_fu_1054_p3 <= 
        kernel_val_V2_fu_918_p3 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        kernel_val_1_V_0_w_fu_134;
    sel_tmp3_fu_879_p3 <= 
        tmp_92_reg_1673 when (sel_tmp2_fu_874_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp40_fu_1070_p3 <= 
        kernel_val_V2_fu_918_p3 when (sel_tmp27_fu_989_p2(0) = '1') else 
        kernel_val_1_V_1_w_fu_130;
    sel_tmp41_fu_1078_p3 <= 
        kernel_val_1_V_1_w_fu_130 when (sel_tmp32_fu_1002_p2(0) = '1') else 
        sel_tmp40_fu_1070_p3;
    sel_tmp42_fu_1086_p3 <= 
        kernel_val_1_V_1_w_fu_130 when (tmp_94_reg_1585(0) = '1') else 
        sel_tmp41_fu_1078_p3;
    sel_tmp43_fu_1093_p3 <= 
        kernel_val_1_V_1_w_fu_130 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        sel_tmp42_fu_1086_p3;
    sel_tmp44_fu_1109_p3 <= 
        kernel_val_V2_fu_918_p3 when (sel_tmp22_fu_963_p2(0) = '1') else 
        kernel_val_0_V_1_w_fu_126;
    sel_tmp45_fu_1117_p3 <= 
        kernel_val_0_V_1_w_fu_126 when (sel_tmp25_fu_976_p2(0) = '1') else 
        sel_tmp44_fu_1109_p3;
    sel_tmp46_fu_1125_p3 <= 
        kernel_val_0_V_1_w_fu_126 when (sel_tmp27_fu_989_p2(0) = '1') else 
        sel_tmp45_fu_1117_p3;
    sel_tmp47_fu_1133_p3 <= 
        kernel_val_0_V_1_w_fu_126 when (sel_tmp32_fu_1002_p2(0) = '1') else 
        sel_tmp46_fu_1125_p3;
    sel_tmp48_fu_1141_p3 <= 
        kernel_val_0_V_1_w_fu_126 when (tmp_94_reg_1585(0) = '1') else 
        sel_tmp47_fu_1133_p3;
    sel_tmp49_fu_1148_p3 <= 
        kernel_val_0_V_1_w_fu_126 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        sel_tmp48_fu_1141_p3;
    sel_tmp50_fu_1164_p3 <= 
        kernel_val_V2_fu_918_p3 when (sel_tmp25_fu_976_p2(0) = '1') else 
        kernel_val_1_V_2_w_fu_122;
    sel_tmp51_fu_1172_p3 <= 
        kernel_val_1_V_2_w_fu_122 when (sel_tmp27_fu_989_p2(0) = '1') else 
        sel_tmp50_fu_1164_p3;
    sel_tmp52_fu_1180_p3 <= 
        kernel_val_1_V_2_w_fu_122 when (sel_tmp32_fu_1002_p2(0) = '1') else 
        sel_tmp51_fu_1172_p3;
    sel_tmp53_fu_1188_p3 <= 
        kernel_val_1_V_2_w_fu_122 when (tmp_94_reg_1585(0) = '1') else 
        sel_tmp52_fu_1180_p3;
    sel_tmp54_fu_1195_p3 <= 
        kernel_val_1_V_2_w_fu_122 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        sel_tmp53_fu_1188_p3;
    sel_tmp55_fu_1219_p3 <= 
        kernel_val_V2_fu_918_p3 when (tmp_94_reg_1585(0) = '1') else 
        kernel_val_0_V_0_w_fu_114;
    sel_tmp56_fu_1226_p3 <= 
        kernel_val_0_V_0_w_fu_114 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        sel_tmp55_fu_1219_p3;
    sel_tmp57_fu_1242_p3 <= 
        kernel_val_V2_fu_918_p3 when (sel_tmp32_fu_1002_p2(0) = '1') else 
        kernel_val_2_V_1_w_fu_110;
    sel_tmp58_fu_1250_p3 <= 
        kernel_val_2_V_1_w_fu_110 when (tmp_94_reg_1585(0) = '1') else 
        sel_tmp57_fu_1242_p3;
    sel_tmp59_fu_1257_p3 <= 
        kernel_val_2_V_1_w_fu_110 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        sel_tmp58_fu_1250_p3;
    sel_tmp60_fu_1273_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (sel_tmp19_fu_944_p2(0) = '1') else 
        kernel_val_V2_fu_918_p3;
    sel_tmp61_fu_1281_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (sel_tmp22_fu_963_p2(0) = '1') else 
        sel_tmp60_fu_1273_p3;
    sel_tmp62_fu_1289_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (sel_tmp25_fu_976_p2(0) = '1') else 
        sel_tmp61_fu_1281_p3;
    sel_tmp63_fu_1297_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (sel_tmp27_fu_989_p2(0) = '1') else 
        sel_tmp62_fu_1289_p3;
    sel_tmp64_fu_1305_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (sel_tmp32_fu_1002_p2(0) = '1') else 
        sel_tmp63_fu_1297_p3;
    sel_tmp65_fu_1313_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (tmp_94_reg_1585(0) = '1') else 
        sel_tmp64_fu_1305_p3;
    sel_tmp66_fu_1320_p3 <= 
        kernel_val_2_V_2_w_fu_106 when (sel_tmp36_fu_1028_p2(0) = '1') else 
        sel_tmp65_fu_1313_p3;
    sel_tmp6_demorgan_fu_856_p2 <= (tmp_74_fu_780_p2 or tmp_70_reg_1623);
    sel_tmp6_fu_886_p2 <= (sel_tmp6_demorgan_reg_1684 xor ap_const_lv1_1);
    sel_tmp7_fu_891_p2 <= (tmp_71_reg_1645 and sel_tmp6_fu_886_p2);
    sel_tmp8_fu_896_p3 <= 
        p_Val2_66_reg_1679 when (sel_tmp7_fu_891_p2(0) = '1') else 
        sel_tmp3_fu_879_p3;
    sel_tmp_fu_926_p2 <= "0" when (j2_reg_201 = ap_const_lv2_0) else "1";
        sh_amt_cast3_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1651),16));

        sh_amt_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1651),32));

    sh_amt_fu_742_p3 <= 
        tmp_72_fu_730_p2 when (tmp_71_fu_724_p2(0) = '1') else 
        tmp_73_fu_736_p2;
    sigmaX_assign_fu_393_p3 <= 
        ap_const_lv64_3FE999999999999A when (tmp_69_fu_387_p2(0) = '1') else 
        sigmaX;
    sigmaX_to_int_fu_351_p1 <= sigmaX;
    storemerge_fu_808_p3 <= 
        ap_const_lv16_FFFF when (isneg_reg_1606(0) = '1') else 
        ap_const_lv16_0;
    tmp94_fu_938_p2 <= (sel_tmp_fu_926_p2 and sel_tmp18_fu_932_p2);
    tmp_176_cast_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_823_p2),32));
    tmp_220_neg_fu_486_p2 <= (tmp_220_to_int_fu_483_p1 xor ap_const_lv32_80000000);
    tmp_220_to_int_fu_483_p1 <= index1_reg_1519;
    tmp_56_fu_418_p2 <= std_logic_vector(unsigned(i_reg_166) + unsigned(ap_const_lv2_3));
    tmp_57_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_166),5));
    tmp_58_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_189),5));
    tmp_61_fu_463_p2 <= std_logic_vector(unsigned(j_reg_178) + unsigned(ap_const_lv2_3));
    tmp_64_fu_492_p1 <= tmp_220_neg_fu_486_p2;
    tmp_65_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_178),5));
    tmp_65_fu_381_p2 <= (notrhs_fu_375_p2 or notlhs_fu_369_p2);
    tmp_66_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_201),5));
    tmp_67_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1613),12));
    tmp_68_fu_701_p3 <= (ap_const_lv1_1 & tmp_91_reg_1618);
    tmp_69_fu_387_p2 <= (tmp_66_fu_295_p2 and tmp_65_fu_381_p2);
    tmp_70_fu_692_p2 <= "1" when (tmp_89_fu_666_p1 = ap_const_lv63_0) else "0";
    tmp_71_fu_724_p2 <= "1" when (signed(F2_fu_718_p2) > signed(ap_const_lv12_E)) else "0";
    tmp_72_fu_730_p2 <= std_logic_vector(signed(ap_const_lv12_FF2) + signed(F2_fu_718_p2));
    tmp_73_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv12_E) - unsigned(F2_fu_718_p2));
    tmp_74_fu_780_p2 <= "1" when (F2_reg_1639 = ap_const_lv12_E) else "0";
    tmp_75_fu_433_p3 <= (i_reg_166 & ap_const_lv2_0);
    tmp_76_fu_789_p2 <= "1" when (unsigned(sh_amt_reg_1651) < unsigned(ap_const_lv12_36)) else "0";
    tmp_77_fu_365_p1 <= sigmaX_to_int_fu_351_p1(52 - 1 downto 0);
    tmp_78_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_777_p1),54));
    tmp_79_fu_798_p2 <= std_logic_vector(shift_right(signed(p_Val2_64_fu_772_p3),to_integer(unsigned('0' & tmp_78_fu_794_p1(31-1 downto 0)))));
    tmp_80_fu_445_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_441_p1) - unsigned(tmp_57_cast_fu_429_p1));
    tmp_81_fu_864_p2 <= std_logic_vector(shift_left(unsigned(tmp_92_reg_1673),to_integer(unsigned('0' & sh_amt_cast3_fu_861_p1(16-1 downto 0)))));
    tmp_82_fu_766_p2 <= "1" when (signed(tmp_72_fu_730_p2) > signed(ap_const_lv12_36)) else "0";
    tmp_83_fu_823_p2 <= std_logic_vector(signed(ap_const_lv12_FF1) + signed(F2_reg_1639));
    tmp_84_fu_522_p3 <= (i1_reg_189 & ap_const_lv2_0);
    tmp_85_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_840_p3),16));
    tmp_86_fu_534_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_530_p1) - unsigned(tmp_58_cast_fu_518_p1));
    tmp_87_fu_478_p2 <= std_logic_vector(unsigned(tmp_80_reg_1466) + unsigned(tmp_65_cast_fu_474_p1));
    tmp_88_fu_640_p2 <= std_logic_vector(unsigned(tmp_66_cast_fu_636_p1) + unsigned(tmp_86_reg_1548));
    tmp_89_fu_666_p1 <= ireg_V_fu_662_p1(63 - 1 downto 0);
    tmp_90_fu_650_p2 <= (j2_reg_201 or i1_reg_189);
    tmp_91_fu_688_p1 <= ireg_V_fu_662_p1(52 - 1 downto 0);
        tmp_92_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_reg_1484),64));

    tmp_92_fu_785_p1 <= p_Val2_64_fu_772_p3(16 - 1 downto 0);
        tmp_93_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_640_p2),64));

    tmp_93_fu_750_p4 <= sh_amt_fu_742_p3(11 downto 4);
    tmp_94_fu_656_p2 <= "1" when (tmp_90_fu_650_p2 = ap_const_lv2_0) else "0";
    tmp_96_fu_804_p1 <= tmp_79_fu_798_p2(16 - 1 downto 0);
    tmp_97_fu_832_p3 <= p_Val2_64_fu_772_p3(to_integer(unsigned(tmp_176_cast_fu_828_p1)) downto to_integer(unsigned(tmp_176_cast_fu_828_p1))) when (to_integer(unsigned(tmp_176_cast_fu_828_p1))>= 0 and to_integer(unsigned(tmp_176_cast_fu_828_p1))<=53) else "-";
    tmp_fu_355_p4 <= sigmaX_to_int_fu_351_p1(62 downto 52);
        x_assign1_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_418_p2),32));

        x_assign_s_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_fu_463_p2),32));

end behav;
